//Below is the code with Brute Force Approach which takes time complexity of O(N2). and Space complexity O(N2). Matrix is of size N X N.
#include<iostream>
using namespace std;
int main(){

    int array[4][4] = {{1,2,3,4},
                       {5,6,7,8},
                       {9,10,11,12},
                       {13,14,15,16}};
    
    int ans[4][4] = {{0}};
    for(int row = 0 ; row<4 ; row++){
        int insertCol = 4 - 1 - row;
        for(int col = 0 ; col< 4 ; col++){
            int value = array[row][col];
            ans[col][insertCol] = value;
        }
    }
    for(int i = 0 ; i<4 ; i++){
        for(int  j =0 ; j<4 ; j++){
            cout<<ans[i][j]<<" ";
        }cout<<endl;
    }
    
    return 0;
}

// this is optimised code. in this code first we have taken transpose of the matrix and reverse the row of the matrix. 

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int size = matrix.size();
        for(int row = 0 ; row <size ; row++){
            for(int col = 0 ; col<size ; col++){
                if(col>row){
                    int temp = matrix[row][col];
                    int temp2 = matrix[col][row];
                    matrix[col][row] = temp;
                    matrix[row][col] = temp2;
                }
            }
        }

        for(int row = 0 ; row< size ; row++){
            int start = 0;
            int end = size-1;
            while(start< end){
                int temp = matrix[row][start];
                matrix[row][start] = matrix[row][end];
                matrix[row][end] = temp;
                start++;
                end--;
            }
        }
        
    }
};
