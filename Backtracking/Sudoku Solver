class Solution {
public:

bool isSafe(vector<vector<char>>& board, int n, int row, int col, int value) {
    for (int i = 0; i < n; i++) {
        if (board[row][i] == value + '0') return false;
    }
    for (int i = 0; i < n; i++) {
        if (board[i][col] == value + '0') return false;
    }
    for (int i = 0; i < n; i++) {
        if (board[3 * (row / 3) + (i / 3)][3 * (col / 3) + (i % 3)] == value + '0')
            return false;
    }
    return true;
}

void solve(vector<vector<char>>& board, int n, int row, int col,vector<vector<char>>& ans,bool& ansMila) {
    if(ansMila == true) return;
    if (row >= n) {
        // Printing the solved board
        // for (int i = 0; i < 9; i++) {
        //     for (int j = 0; j < 9; j++) {
        //         cout << board[i][j] << " ";
        //     }
        //     cout << endl;
            
        // }cout<<endl<<endl;
        //ans = board;
        ansMila = true;
        return;
    }

    if (col == n) {
        solve(board, n, row + 1, 0,ans,ansMila);
        return;
    }

    if (board[row][col] != '.') {
        solve(board, n, row, col + 1,ans,ansMila);
        return;
    }

    for (int value = 1; value <= 9; value++) {
        if (isSafe(board, n, row, col, value)) {
            char ch = value + '0';
            board[row][col] = ch;
            solve(board, n, row, col + 1,ans,ansMila);
            if(ansMila == true) return;
            board[row][col] = '.';
        }
    }
}
    void solveSudoku(vector<vector<char>>& board) {
        vector<vector<char>> ans;
        int n = 9;
        bool ansMila = false;
        solve(board, n, 0, 0,ans,ansMila);
        //board = ans;
    }
};

"-------------------------------------------------------------------------------"
class Solution {
public:

bool isSafe(vector<vector<char>>& board, int n, int row, int col, int value) {
    for (int i = 0; i < n; i++) {
        if (board[row][i] == value + '0') return false;
    }
    for (int i = 0; i < n; i++) {
        if (board[i][col] == value + '0') return false;
    }
    for (int i = 0; i < n; i++) {
        if (board[3 * (row / 3) + (i / 3)][3 * (col / 3) + (i % 3)] == value + '0')
            return false;
    }
    return true;
}

void solve(vector<vector<char>>& board, int n, int row, int col,vector<vector<char>>& ans) {
    if (row >= n) {
        // Printing the solved board
        // for (int i = 0; i < 9; i++) {
        //     for (int j = 0; j < 9; j++) {
        //         cout << board[i][j] << " ";
        //     }
        //     cout << endl;
            
        // }cout<<endl<<endl;
        ans = board;
        return;
    }

    if (col == n) {
        solve(board, n, row + 1, 0,ans);
        return;
    }

    if (board[row][col] != '.') {
        solve(board, n, row, col + 1,ans);
        return;
    }

    for (int value = 1; value <= 9; value++) {
        if (isSafe(board, n, row, col, value)) {
            char ch = value + '0';
            board[row][col] = ch;
            solve(board, n, row, col + 1,ans);
            board[row][col] = '.';
        }
    }
}
    void solveSudoku(vector<vector<char>>& board) {
        vector<vector<char>> ans;
        int n = 9;
        solve(board, n, 0, 0,ans);
        board = ans;
    }
};



"-------------------------------------------------------------------------------------------------------"
class Solution {
public:
    bool isSafe(int row, int col, vector<vector<char>>& board, char value) {
        int n = board.size();
        for(int i=0; i<n; i++) {
            //row check
            if(board[row][i] == value)
                return false;
            
            //col check
            if(board[i][col] == value) 
                return false;

            //3*3 box check
            if(board[3*(row/3)+(i/3)][3*(col/3)+(i%3)] == value) 
                return false;
        }

        return true;
    }

    bool solve(vector<vector<char>>& board) {
        int n = board.size();

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                //check for empty cell
                if(board[i][j] == '.') {
                    //try to fill with values ranging from 1 to 9
                    for(char val = '1'; val<='9'; val++) {
                        //check for safety
                        if(isSafe(i,j, board, val)) {
                            //insert
                            board[i][j] = val;
                            //recursion sambal lega
                            bool remainingBoardSolution = solve(board);
                            if(remainingBoardSolution == true) {
                                return true;
                            }
                            else {
                                //backtrack
                                board[i][j] = '.';
                            }
                        }
                    }
                    //if 1 se 9 tak koi bhi value se solution
                    //nahi nikla ,current cell pr, 
                    //that means piche kahin pr galti h , 
                    //go back by returning false
                return false;
                }
            }
        }
        //all cells filled 
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
