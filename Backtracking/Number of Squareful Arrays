class Solution {
public:
    bool checkPerfectSquare(int& num,int s,int e ){
        if(s>e) return false;
        int mid = s + (e-s)/2;
        if(mid * mid == num) return true;
        if(mid*mid > num){
            e = mid - 1;
            return checkPerfectSquare(num,s,e); 
        }else{
            return checkPerfectSquare(num,mid+1,e);
        }
        
    }
    bool isSquarefull(vector<int>& nums,int& index){
        if(index == nums.size()-1) return true;
        if(nums.size() == 1 ){ return checkPerfectSquare(nums[0],0,nums[0]);}
        int sum = nums[index] + nums[index + 1];
        bool ekcaseAns = checkPerfectSquare(sum,0,sum);
        if(ekcaseAns == false) return false;
        index++;
        return isSquarefull(nums,index); 
    }
    vector<vector<int>> Already;
    bool notAlready(vector<int>& nums){
        for(auto it : Already){
            if(it == nums) return false;
        }
        return true;
    }
    void helper(vector<int>& nums, int& count,int index){
        //base case.
        if(index >= nums.size()){
            int i = 0;
            if(isSquarefull(nums,i) && notAlready(nums)){ 
                count++;
                Already.push_back(nums);

            }
            return;
        }

        for(int j = index ; j <nums.size() ; j++){
            swap(nums[index],nums[j]);
            helper(nums,count,index + 1);
            swap(nums[index],nums[j]);
        }

    }
    int numSquarefulPerms(vector<int>& nums) {
        int count = 0;
        int index = 0;
        helper(nums,count,index);
        return count;
    }
};
