#include <iostream>
#include <string.h>
using namespace std;
int getLength(char name[]){
    int length = 0 ;
    int i = 0 ;
    while(name[i] != '\0'){
        length++;
        i++;
    }
    return length;
}
void reverseString(char name[]){
    int length  = getLength(name);
    int s = 0;
    int e = length-1;
    while(s<=e){
        swap(name[s],name[e]);
        s++;
        e--;
    }
    cout<<name<<endl;
}
void replace_with(char name[]){
    int n = getLength(name);
    for(int i = 0 ; i< n-1 ; i++){
        if(name[i] == ' '){
            name[i] = '@';
        }
    } 
    cout<<name<<endl;
}
bool checkForPalindrome(char name[]){
    int n = getLength(name);
    int s = 0;
    int e = n - 1;
    while(s<=e){
        if(name[s] != name[e]){
            return false;
        }else{
            s++;
            e--;
        }
    }
    return true;
}
void convertIntoUpperCase(char name[]){
    int gap = 'a' - 'A';
    int n = getLength(name);
    for(int i = 0 ; i< n ; i++){
        if(name[i]  >= 'a' && name[i] <='z'){
            name[i] = name[i] - gap;
        }
    }
    cout<<name<<endl;
}
 string removeDuplicates(string s) {
        int i = 0;
        cout<<s<<endl;
        while(i != s.length() - 1  && s.length() != 0){

            if(s[i] == s[i+1]){
                cout<<i<<" equals "<<i+1<<endl;
                cout<<"s before removing "<<s<<endl;
                s.erase(i,2);
                i--;
                
                if(i<0){i = 0;}
                cout<<"s after removing duplicates "<<s<<" i-"<<i<<endl;
            }else{
                i++;
            }
        }
        return s;
    }
int main(){

    // char name[100];
    // cin.getline(name,100);
    // cout<<name<<endl;
    // convertIntoUpperCase(name);
    // char ch[100] = {'B','a','b','b','a','r'};
    // ch[2] = '\0';
    // ch[6] = '\0';
    // string s = "Babbar";
    // s[2] = '\0';
    // s[6] = '\0';

    // cout<<ch<<endl;
    // cout<<s<<endl;
    cout<<removeDuplicates("gfoqmldqbrlchcloqrohouigkticjvplacqvfurvtuladnolpiherkukivqjqougusicpnfjusrdboqrbqgnusmjnivofalbjjcnkdatelijrgtrmmsnobuougnmvlsjffjukfpodfgjolcahauvenshpgqbekmisqjdasnrcjanlgaaauthjtvbnccsvbnrqksskqadjoaacqrppkgnucmulugojkbtlfrlnlsvctmodhuorpolhjtsofvthdidibtccnofghfouduhuomtphvmnsbkmshgpocrpemckvvekfoknngbrjsvslgeanvdukfungiuqbsigsuonquhcqjqukmfoplljcltrosivkmioonhlsisrjpknitfbppfscdccojubmemicqsukedcocsfnqgspkqhurmbpqbjrmqtbdimkjiqhnjvbmaarpjvbtmtuobleqidpfgiqbueejpvhgmpqqlskdmdrrgchddlcbeciqohmdemsopsniskpqtpcidtcprqtpaidtkamsrpkebnjillckrusgsscclmfedemavtteaqncliilopmfgdglptanrakhkfhmtfjlavufahuncrbstvjadviqjltaojqvgqcudblgaoiqvlbrkblkvraramiskdqnamqkuiqmkqleutfgsfujpnplaicgrujrlvpuledpcbbvdrkbbefmqcscgouferltbldpnfgtgknmctottbjsemjafkmhjfujuljpltruomluahdfipmfmqeprlutieadqjddgokjiplpfasuqfcmtuaikevqihhdjiomdgngeglclofutvjeulnsguquvaduvrtgbeklqdrpvrbgmkrafubsnqrasrergsadjuvlcedfsjsfljkdnfbmlathhhsroaieueamisofqkopfbttfiuiuvkhtetjjtnbrjgaketcndamuffiiaigsqbnchpacdccvppngkhhmchbktilcnlvlmnepbtblaidflpseegmpndkkiqvmtlimmqsnmnpveamnrbsckuvimmdsljluspocngapobgiandctoagakrefbmbdtnhqmarjsrmoeelavsqngcdssqplgbujimslockdtcraliarcvootfrnnmoadjlbbtbbvoemdbfmkgtqammkjejtsfranareesupoovjduhubmomgjpsjrlrreojdgrqeiohkaqleaaoqnrmggicgmuqjcgphavriclntetmmfsgmrmqhaciqgkpeoltrlfnabfudcklnrmheuhtevrjjqpdnctfspugbltjsdnlmagtmhcefpfraltbcnjbqjdlkgjovvurulngaqfugttovqeroigjdequvpoqprbqfhnehvemimegumcesthvslvekmspatividprcvlukmmntmnnqbbdgkucajmfstjoundgtelvsellcgtadhuiptmqoiadgpekrckhqoggtjearkghnlsihsjrkhjtgvrknvcavanonistqprfksadppqnuusmoouilcgdroqmpssocfpidtkhppfihtsnkvkgeqdorkkusfahorgnnisoihdlokinaehresgvtihbsrlklhjhncvtllenpjplqlatotcbdbffsrplatbilqdcijkergkjgejpmjoogfssgcfduugtbodplftibboomhjohkpmoqmkqrlovsdjrdkoornlbookabkuaabfdbphpfeiupcpbkrpomclttdrmufqfsnjmqhuegljbnvkjglmtueueoupcdpoachnkjcvqtlpacofuvbmtrhlhkntnamqgqcjpvqtjkpnifrpakhjcepeitbndrquqrsplgnptmkppbeeqmhjstmcqtifutlcgmibvshpjilrgpjfphnptfgbujddvabjhcspukkmoubhneehtelcnshnesulpgohvhjqsqccbgrherdmkgcsdeeegcmkqrqpfabshkinucqukfujddvkourqdukdepaaqghaqfodjgdsovvkvqvkbpjlefvmrrhfonstpftupactuhuklecunkmihmkeacbfbkpssklvtkktsturphrtrihkhuecqelgqarqeuhudopsjufbvamtrcqjlpkchdineqjhpphofqqkvuotocqbqbubpojrtrspdgoefdhgkqrgbftpvstqovuldbcercsrcpbdocjdnchkhgrcosumvgehafcdencooftdshjmacnovqaknfljotogvfcoiescvpkannnngucueohleliifaqtkhopljeilagdgrrtetcgbibuhfktdqommapothepfqabbrbbquhdmtcvesaopdfmnfbapocqidkcsbpmohfljjqhcqttdpstphrtqvqeubakorpljtegdnlekjouvbtpocjpaqspcmajtnpacsjustbngbnrffnksjgclbicdsnjtosathvdvrurccsjqprivvupshkophjvccggtrfqckguhaoqnddodmnkiksimhepsvkfdvqtpeshchkmcjemsjuumuatnclffcustbjbtblfenlhriibunmaffsmtifncrvhjskpslfrhqtbgpmkuiqcmvuqsjfgtttraheiltpantrlmioueprurbjrpnkegiuobsbvhcduforbejpkfvifeubugrlbnucqsqgakpasujunqqdgqkgjkvjgaphrfslbmepekkqkmnevkfabhtrimsabgvuiraervhldnekaqrojpjicqvlkttqgiigltkstappaecotkltquutqkcphkmiqkpevagibmsutcmommeuivslgmjggcqtshoaomsjobrlhtuspstoomsasofvdpgdjaesljvfrbajjfuotqnspriufbnghppqqdejjemocddnpussnqfdqfjsgqvqnvdsibtfepkgkgmadbdmarlmqdlumpnigogflquprhtnviubpfpmbkduvnuleqbphiaeevpevlbbnsmvfulahikgqpbhmemvcnqoqhghuqcdfijnusdemfrtpcdvvcesiicnookfqjldifnfkkhsfhnrkhdhgkvpbpgobiutjtfoiktoftgvlvhdsjceupghtulalghmdubfidmchnefnrrtpvhfcmgfpunpnpovfepqvtaipktnsgpogsdsifsmncamidbdbnhruakitipaqdekksqspctiskrhafrllbrgcmntierkosumqkgcpmdtngaelqrudeecutakfplcpchftgoacupeqvroqmvtvesmqhpkhpjjeblmpagqektalnhllbllagdbvaiohemnicdupqtspmagvcsqhescamssmjndhpqkppgqffbionlsgvcnnkstnoljethigblkgpdvpogfneudobnoghrcthomaiqqmmelodgudptepotvtabvsgbkefitaaeojajbobiufdappruvrchkacipjqdlfpklancajgeaecvrnthroosfnbkqqjdfsdnklkuobeanocifuptctfurofrkftrtugiehijjrnlbretbmunfodnqmrresflmkdfiplhgjqofdalkivcnjmjbfgaljgjirhbupbkmhqpjcjrokkopesbuqufqigphdiphbhrjbaledtnbkncmvetntujoqrubruvnsbacjkpoiobnbopfrflpqqkmnnookuobqjrbgqecrrpqtulfcvccpvllhehjafplnspnogoaojtagvfboumjksoeefmutabapregoeohfqsrpfsjfivfgpoqispomjkduakvvkdttqgjrsbudehirgincquddcsjsvkcfdrdoavosfqmcfvockjaobecbiqhvlqhflbovaismslgnnrtsmhlabpljciceacmnhlvnrdhfqiqilldaiapmbbbnmgpprddbserbltjebsjnbkqarcsmhfacgklajhmdmbajgmqckdrmhoijbmlpmlsghjdsuebprfosriebafntojrbnepfmpfnimqfahiusluolqcdbfpreibkeqfgvreagejohqugehuqibqveoegkllgajboucbkhbkpgtlggpqvacbdlhbumocivjbpmhfdnouenpgnsunhskmraddfskieicsevnritavnsnhgcovpgethqmbfrdgcoifbnkvumvivpiekrjtkarfocokfstejvqpgvmqmvetauhsrqbpopjhajkvpttdmuphdphtreqnjdpvcpvqdqujgnbjporflemhmicqufdruprakemslplthcinjejlmjvnrtqfpseqdqumcdjgkgkligghrvinqvfaaboejoivbmerjuchrgahtjhukoadjjhsirjnhqetcmjnhpgqkjpdjtkggptdbovslectidmdscrofjgobhjvqtqgjmdnlgaaffavpebkfqmkgtuiiadsabfmjmjhnejbvvmnipajfhfnrptdkqnpdmoparlhklsvullekipfuapfhhilhehopffuiutpebkfgrptolblgjvajsvqulvgpediguqtcageiskmlreocipkupfjeclpvmbfqhgtbbcdkqfqkrhbsabechnmoeskertfkvbsbrrhjdgliilkqodtbefjbdjrrtljkccudeqrnaarjinqcounncqdphqjhovkodngijpcfurasngnaehfdodmhfhoncnoplmofktlmjdrenipfrvvntgfdnuqhtjhbocjnunpondojmktdneretcppbnhagmmgibrncblrtmedsqfigqbrjinpsfppugasgdjusqucptjnidbqljqjfhfsueqtrlgjieisqjcdttbnsucftradhjrsfeijfeehujkmhjfkotlqptrksdqqpjgfbofhugdvnvfvemkhrofdslddsmmsbellgqhqsndbufbjlnjiankufdbaeemkfokmkvgpbknhlpsrfndjfhqktgmjirmpouphkvrfaqbdueujactgdgdpscloarmhvetdqicdqkctkrjhrlviumbpvkoutmftvrjiooifjurklkoejvbtepbjdhrdkfpvunmvonnojfjgibkriqqfugvctnprvsntiamlbigrokunrspqqjailiqiuhagsnbcmgqocihlmbopirqompfmrolaqcogelvfpocpffbdjdvoojcivkugmmqpfuqdfugifbphnjjkshlhmblrrfskhegotmaomfmloqhcucbkaajiijuinjhiioeipndvdmuobrvsuarcbcklkoviunisefmafvsckppipkltsidjndfqbbqecthbnpusgdatcsbcskvtdcthvopffjpivkdffqorhemmchbchvavljlsiothbsmbctblpfquqfroklkkldllodjfbstshopuiukamulubaolclmvkefjvooukheufjiptkmlifokbjetlpfdouhfkfputncpmkrmeiupfbnevekerjlkkvrsveesffrvfegaegvsgonplahmsdafjljmhpobfusoaefnvjehdcbsgrmujpdcfiisrqandmdilagprgduvqnclhvmnstqcsvljlkfdocgvvpejjitueiainurmiqbnhrulrjpepkciccjuhcieeojtogkgibqjtciflnddtkiutqioheokslrddjegkhslotbglcritddacvkmhfdcrafthqgrqaptrmepvquoeitbroiickijvbivqmqenlunrmjotoasmqvlstvhvbacgvufmtbikedpuhodlcdacorsajdqguqvnqbesanacbapnkphktkijchfdotrsgfaickbsbdcqqdtgutlivcjhpteuefegmlbtbfrmdbktroiqombtntonbmbtbhqfvjtvrlmsvaoankgilmtqvjckrklosagklnfapbijgnqoojonibpveirvtelouvgttbnsdcagbgoqestjsbgfehjkehrpmilcbcdqokjsfvkofgrlkthejpbqagnrfufobopmsmcvfungcmiejpoarangifsubknsakisfvjudjnspldqqerpluisipgukrkfcldiksosapalevrqohbnlabfdqskiekqdhefpsepcghohvblbfflqmccicrtcutjccoqbleooeruqsfcgljsbvutsvqljlgsgrjkjqcashgbusrvfvpkucipglomnsosimdhbucfriqnvgoivevpsrgndegkrqfjbdlgislqrhhqmutqsqefcpqbkplfnigbmufanrkkbjkjbpqltfjuqbbobqcohtiemhstqatdbnimbvdpfsibgushfpmjeddbfcmjvdlogknvkdasfgjqmjdvqnjigvfrmeflsdjelrdlmqtpsrmkqefuvhcegmrbrniovhlmpetcfiqhjmkjgeuknjfnmlonjkskbujuhquapgkbllqdqbcktgkmangcqcbvjfgecvvgmlcdfeovftdmdkajckebjkhrpmbqldrgeekaaabjapfaqakkedjsokhsueutlvlmvcmnjtjhfciajoqungjmrcvobpqlprnlrdluvtinpcggnpmqnriadqqdcbkavckreaakgqdtcgrsvqjpjujigcggukorqfqsoemsgkislffqshpkfjjfserjfgejsqpsuofgsbkjcijojqdqhdicgkctdalpilhcchtjmlbukgfspejgosbdrhpktoeqsvhedufobpbpbcsitohmgliflrhkjqjuhmcevgmgmrfadklkuqsmabmvkgdbcilhvcgrldgfhtqpmtumvneroemqlojtopsijhipfekbhcungapsjbucdtammdncnftqbfghbgqgeilmtunqvpipbqglfmtejbteekkfpbgbbqckfandnlenkdtlvvkscisnbcfjrimojhluiettogidoaibsghlddhljgjrbkihttpuchciotganpltlvulmfchjepvnqojescndqrhuklohpbvmabgmmtgeqtqlntllrorcskbulapookkmbglnvjqltvopkcilsqmnivgvdcdatbnplafjatuevvknaghappufkfjkkqvptrbsmashnjvotnohtpijsfrsrltgeqvepefcasrhaktvvoaritlgpocfqpnipgvauqhqcenielrarvrtelbgsjeucqqdvjqhokmvdbtrlmcbvrtessvlpsvkojekitmgavmsvmvefkudagimdigqtolcvmhcaslhrpoifrbmubokijmohnnfuvisjvicqvpnavbklmnmqftjotgjraklevsipvhfaavggsptdnuuuqrgilcpcseoqrqoshkcudctlkfnqvsgombecgmnjlevhniqbnpvdmniibutohbmnrgsdvfcrokljqtqdrnbermdkepfljccqgijdlfmeetlvrdeconmjgvgeqaghpnmmisselavjbiadbuijterjrqbpfaomqekmrlmmimrtprvglfqtjcakfmolaogarufshqqdcqarlttomsjdeskonqhtksedkljhoulnaduuifgmkrcakvnmujmsdjruvhfpqhogcfffcnetrqllgdvetfltdehjarrcbnbhkqsinustfllcjrjvfqtpnplkorcomljcjeomkfqsgnkicivoiombipkfqpatccqnabreqigtenksbehovrfhavrdurkovpfgbigqkqvljhfmoqakgqkeqmtaqamtplepgtpukqrsmjsjivfkvaphsmfavmngraunokjdoqnnfdfppdilvprdhbaltbhroopahigrkjegethpulfpqnivobsjemcvpgvothlfiupgguudcubkjkkdblovgviakhvfpleckeqdiqurvkocnunecvkgnuhjlsbbaplarplokttasgeasualahbanudrfipfsjiitfpcksqobbmcsqqnemmectgtfjutftfgnqhdktrsramkhotvmthsatlsngfvjamsavalnbdoglfoqbdallbldneddaabpqjneofvkmkuniempfuqreebbtismvrvkjaidhorpssfbbibqqskrnghclripmviqjnbirlrqnlpmhpufbobgjuevvpolgqknvisifd");
    


    
    
    return 0;
}
