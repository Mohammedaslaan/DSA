
public:
    string removeOccurrences(string s, string part) {
        int pos = s.find(part);
        while(pos != string::npos){
            s.erase(pos,part.length());
            pos = s.find(part);
        }
        return s;
    }
};


class Solution {
public:
    string removeOccurrences(string s, string part) {
        int length = part.length();
        int i = 0;
        while(i<s.length()){
            
            if(s.substr(i,length) == part){
                s.erase(i,length);
                i = i - length;
                if(i<0){
                    i = 0;
                }
            }else{
                i++;
            }
        }
        return s;
    }
};

class Solution {
public:
    string removeOccurrences(string s, string part) {
    int i = 0;
    int lens = s.length();
    int lenp = part.length();
    
    while (i < s.length())
    {
        if (s.substr(i, lenp) == part)

        {   //cout<<i<<endl;
            //cout<<s.substr(i, lenp)<<endl;
            s.replace(i,lenp,"");
            i = 0;
            continue;
        }
        i++;
    }
    //cout<<s;
        return s;
    }
};
