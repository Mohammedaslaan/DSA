
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/966907130/

class Solution {
public:
    int Firstoccurence(vector<int>& nums, int target){
        int s = 0;
        int e = nums.size()-1;
        int mid = s + (e-s)/2;
        while(s<=e){
            int element = nums[mid];
            if(element == target && mid == 0){
                return mid;
            }else if(element == target && nums[mid-1] != target){
                return mid;
            }else if(element == target){
                e = mid-1;
            }else if(element<target){
                s = mid + 1;
            }else{
                e = mid - 1;
            }
            mid = s + (e-s)/2;
        }
        return -1;
    }
    int lastoccurence(vector<int>& nums, int target){
        int s = 0;
        int e = nums.size()-1;
        int mid = s + (e-s)/2;
        while(s<=e){
            int element = nums[mid];
            if(element == target && mid == nums.size()-1){
                return mid;
            }else if(element == target && nums[mid+1] != target){
                return mid;
            }else if(element == target){
                s = mid+1;
            }else if(element<target){
                s = mid + 1;
            }else{
                e = mid - 1;
            }
            mid = s + (e-s)/2;
        }
        return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>ans;
        if(nums.size() == 0){
            ans.emplace_back(-1);
            ans.emplace_back(-1);
            return ans;
        } 
        if(nums.size() ==1 && nums[0] == target){
            ans.emplace_back(0);
            ans.emplace_back(0);
            return ans;
        }else if(nums.size() ==1){
            ans.emplace_back(-1);
            ans.emplace_back(-1);
            return ans;
        }

        int first = Firstoccurence(nums,target);
        int last = lastoccurence(nums,target);
        cout<<first<<"-"<<last<<endl;
        ans.emplace_back(first);
        ans.emplace_back(last);
        return ans;
        
    }
};
