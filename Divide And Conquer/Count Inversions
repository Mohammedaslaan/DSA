//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    void merge(long long arr[],long long& n,long long& count, long long s ,long long e){
        long long mid = s + (e-s)/2;
        long long lenLeft = mid - s + 1;
        long long lenRight = e - mid;
        long long* left = new long long[lenLeft];
        long long* right = new long long[lenRight];
        long long k = s;
        for(int i = 0 ; i < lenLeft ; i++){
            left[i] = arr[k++];
        }
        k = mid + 1;
        for(int i = 0 ; i < lenRight ; i++){
            right[i] = arr[k++];
        }
        long long i = 0;
        long long j = 0;
        k = s;
        while(i < lenLeft && j < lenRight){
            
            if(left[i] <= right[j]){
                
                arr[k] = left[i];
                k++;
                i++;
            }else{
                arr[k] = right[j];
                int elementaageIke = lenLeft - i ;
                count = count + elementaageIke;
                k++;
                j++;
            }
        }
        while( i < lenLeft){
            arr[k] = left[i];
            i++;
            k++;
        }
        while( j < lenRight){
            arr[k] = right[j];
            j++;
            k++;
        }
        delete left, right;
        
        
    }
    void mergeSort(long long arr[], long long n, long long& count, long long s, long long e){
        //base case.
        if(n == 1) {return ;}
        
        int mid = s + (e-s) / 2;
        mergeSort(arr,mid-s+1,count,s,mid);
        mergeSort(arr,e-mid,count,mid+1,e);
        merge(arr,n,count,s,e);
    }
    long long int inversionCount(long long arr[], long long N)
    {
        long long int count = 0;
        long long s = 0;
        long long e = N-1;
        mergeSort(arr,N,count,s,e);
        return count;
    }

};

//{ Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}

// } Driver Code Ends
